TDD(테스트 주도 개발)
테스트코드 작성 -> 테스트코드코드 통과 -> 리펙토링
테스트코드는 api단위별로의 테스트

node : mocha, should, superTest
mocah(npm에 있음) -> 테스트코드를 돌려주는 테스트 러너
ex) index.spec.js (보통 테스트코드는 파일명 or 경로에 spec을 붙임)

const assert = require('assert');

describe('GET /users', () => {
    #뭐를 테스트할지

    it('배열을 반환한다.', () => {
        #이곳에서 검증작업.
        assert.equal(a, b) #같은지 확인하는 함수.
    })
})

------->작성 이후 패키지파일의 scripts 부분에
"test" : "mocha ./index.spec.js"
테스트 돌리기 : console -> npm t
실패하면 it에 입력한 내용이 붉게 표시됨.
성공하면 초록색 체크박스.


Should -> 검증도구(assert대신 실제 많이 쓰는거)
    (1).should.equal(1);


SuperTest -> 단위테스트가 아니라 통합테스트
(https://www.npmjs.com/package/supertest) -> 샘플보는게 이해 빠름.
서버 구동하면서 테스트. 자동화한다는 느낌. 
별도로 서버를 띄우는게 아니라 내부적으로 구동시켜 실제 요청 보낸후 검증

파일 분리되어 있으니까 모듈화시켜서 테스트.
기존 index.js를 
    moulde.export = app #express객체()
SuperTest 파일에서  
    const app = require('./index')


const assert = require('assert');
const req = require('supertest')

describe('GET /users', () => {
    it('배열을 반환한다.', () => {
        req(app)
            .get('/users')
            .end((err, res) => {
                res.body.should.be.insatanceof(Array)
                res.body.forEach(user=>{
                    user.should.have.property('name')
                })
                #이런 느낌으로 사용.

                done() #비동기 함수기때문에 끝났다고 알려줘야함
            })
        assert.equal(a, b) #같은지 확인하는 함수.
    })
})